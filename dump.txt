    Checking ckb-sdk v3.6.0
error[E0425]: cannot find function `block_in_place` in module `tokio::task`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:22:26
    |
22  |             tokio::task::block_in_place(|| h.block_on(future))
    |                          ^^^^^^^^^^^^^^ not found in `tokio::task`
    |
note: found an item that was configured out
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/tokio-1.44.2/src/task/mod.rs:279:27
    |
279 |         pub use blocking::block_in_place;
    |                           ^^^^^^^^^^^^^^
note: the item is gated behind the `rt-multi-thread` feature
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/tokio-1.44.2/src/task/mod.rs:278:5
    |
278 | /     cfg_rt_multi_thread! {
279 | |         pub use blocking::block_in_place;
280 | |     }
    | |_____^
    = note: this error originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
     |
163  |   ...      pub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
     |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely
...
181  |   ...          self.client.post(params_fn)
     |                --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
...
226  |   ...-> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |         -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<RET, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<RET, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
    |
163 |   ...      pub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
    |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
...
181 |   ...          self.client.post(params_fn)
    |                --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
...
226 |   ...-> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |         -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<RET, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<RET, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
    |
163 |   ...ub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
...
181 |   ...   self.client.post(params_fn)
    |         --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
     |
163  |   ...      pub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
     |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely
...
181  |   ...          self.client.post(params_fn)
     |                --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
...
226  |   ...-> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |         -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<RET, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:199:1
     |
199  | / crate::jsonrpc_async!(pub struct IndexerRpcAsyncClient {
200  | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
201  | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
202  | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
203  | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
204  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<RET, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
    |
163 |   ...      pub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
    |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
...
181 |   ...          self.client.post(params_fn)
    |                --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
...
226 |   ...-> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |         -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<RET, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:199:1
    |
199 | / crate::jsonrpc_async!(pub struct IndexerRpcAsyncClient {
200 | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
201 | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
202 | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
203 | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
204 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<RET, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
    |
163 |   ...ub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
...
181 |   ...   self.client.post(params_fn)
    |         --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:199:1
    |
199 | / crate::jsonrpc_async!(pub struct IndexerRpcAsyncClient {
200 | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
201 | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
202 | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
203 | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
204 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
     |
163  |   ...      pub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
     |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely
...
181  |   ...          self.client.post(params_fn)
     |                --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
...
226  |   ...-> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |         -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<RET, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
     |
171  | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172  | |     // BlockFilter
173  | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174  | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...    |
200  | |     pub fn local_node_info(&self) -> LocalNode;
201  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<RET, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
    |
163 |   ...      pub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
    |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
...
181 |   ...          self.client.post(params_fn)
    |                --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
...
226 |   ...-> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |         -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<RET, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<RET, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:163:73
    |
163 |   ...ub fn post<PARAM, RET>(&self, method:&str, params: PARAM)->impl std::future::Future<Output =Result<RET, $crate::rpc::RpcError>> + Send + 'static
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
...
181 |   ...   self.client.post(params_fn)
    |         --------------------------- return type was inferred to be `impl futures::Future<Output = std::result::Result<_, RpcError>>` here
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:284:30
     |
284  |         crate::rpc::block_on(self.check_ckb_chain_async())
     |         -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely
     |         |
     |         required by a bound introduced by this call
...
287  |     pub async fn check_ckb_chain_async(&mut self) -> Result<(), CellCollectorError> {
     |     ------------------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<(), CellCollectorError>>`
     |
     = help: within `impl futures::Future<Output = std::result::Result<(), CellCollectorError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<JsonUint<u64>, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:287:85
     |
287  |       pub async fn check_ckb_chain_async(&mut self) -> Result<(), CellCollectorError> {
     |  _____________________________________________________________________________________^
288  | |         let tip_number = self
289  | |             .ckb_client
290  | |             .get_tip_block_number()
...    |
318  | |         )))
319  | |     }
     | |_____^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-7748313467232587360.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider removing this method call, as the receiver has type `&mut DefaultCellCollector` and `&mut DefaultCellCollector: std::marker::Send` trivially holds
     |
284  -         crate::rpc::block_on(self.check_ckb_chain_async())
284  +         crate::rpc::block_on(self)
     |

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:284:30
    |
284 |         crate::rpc::block_on(self.check_ckb_chain_async())
    |         -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |         |
    |         required by a bound introduced by this call
...
287 |     pub async fn check_ckb_chain_async(&mut self) -> Result<(), CellCollectorError> {
    |     ------------------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<(), CellCollectorError>>`
    |
    = help: within `impl futures::Future<Output = std::result::Result<(), CellCollectorError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<JsonUint<u64>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:287:85
    |
287 |       pub async fn check_ckb_chain_async(&mut self) -> Result<(), CellCollectorError> {
    |  _____________________________________________________________________________________^
288 | |         let tip_number = self
289 | |             .ckb_client
290 | |             .get_tip_block_number()
...   |
318 | |         )))
319 | |     }
    | |_____^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider removing this method call, as the receiver has type `&mut DefaultCellCollector` and `&mut DefaultCellCollector: std::marker::Send` trivially holds
    |
284 -         crate::rpc::block_on(self.check_ckb_chain_async())
284 +         crate::rpc::block_on(self)
    |

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:284:30
    |
284 |         crate::rpc::block_on(self.check_ckb_chain_async())
    |         -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |         |
    |         required by a bound introduced by this call
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<JsonUint<u64>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:287:85
    |
287 |       pub async fn check_ckb_chain_async(&mut self) -> Result<(), CellCollectorError> {
    |  _____________________________________________________________________________________^
288 | |         let tip_number = self
289 | |             .ckb_client
290 | |             .get_tip_block_number()
...   |
318 | |         )))
319 | |     }
    | |_____^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use parentheses to call this trait object
    |
284 |         crate::rpc::block_on(self.check_ckb_chain_async()())
    |                                                          ++
help: consider removing this method call, as the receiver has type `&mut DefaultCellCollector` and `&mut DefaultCellCollector: std::marker::Send` trivially holds
    |
284 -         crate::rpc::block_on(self.check_ckb_chain_async())
284 +         crate::rpc::block_on(self)
    |

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
     |
105  |                   $crate::rpc::block_on(task)
     |                   --------------------- ^^^^ `*mut u8` cannot be sent between threads safely
     |                   |
     |                   required by a bound introduced by this call
...
226  |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:17:1
     |
17   | / crate::jsonrpc!(pub struct CkbRpcClient {
18   | |     // Chain
19   | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
20   | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
110  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
111  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
    |
105 |                   $crate::rpc::block_on(task)
    |                   --------------------- ^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |                   |
    |                   required by a bound introduced by this call
...
226 |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:17:1
    |
17  | / crate::jsonrpc!(pub struct CkbRpcClient {
18  | |     // Chain
19  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
20  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
110 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
111 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
    |
105 |                   $crate::rpc::block_on(task)
    |                   --------------------- ^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |                   |
    |                   required by a bound introduced by this call
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:17:1
    |
17  | / crate::jsonrpc!(pub struct CkbRpcClient {
18  | |     // Chain
19  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
20  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
110 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
111 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
     |
126  |                       $crate::rpc::block_on(task)
     |                       --------------------- ^^^^ `*mut u8` cannot be sent between threads safely
     |                       |
     |                       required by a bound introduced by this call
...
226  |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:17:1
     |
17   | / crate::jsonrpc!(pub struct CkbRpcClient {
18   | |     // Chain
19   | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
20   | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
110  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
111  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
    |
126 |                       $crate::rpc::block_on(task)
    |                       --------------------- ^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |                       |
    |                       required by a bound introduced by this call
...
226 |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:17:1
    |
17  | / crate::jsonrpc!(pub struct CkbRpcClient {
18  | |     // Chain
19  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
20  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
110 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
111 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
    |
126 |                       $crate::rpc::block_on(task)
    |                       --------------------- ^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |                       |
    |                       required by a bound introduced by this call
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:17:1
    |
17  | / crate::jsonrpc!(pub struct CkbRpcClient {
18  | |     // Chain
19  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
20  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
110 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
111 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
     |
105  |                   $crate::rpc::block_on(task)
     |                   --------------------- ^^^^ `*mut u8` cannot be sent between threads safely
     |                   |
     |                   required by a bound introduced by this call
...
226  |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:192:1
     |
192  | / crate::jsonrpc!(pub struct IndexerRpcClient {
193  | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
194  | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
195  | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
196  | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
197  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
    |
105 |                   $crate::rpc::block_on(task)
    |                   --------------------- ^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |                   |
    |                   required by a bound introduced by this call
...
226 |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:192:1
    |
192 | / crate::jsonrpc!(pub struct IndexerRpcClient {
193 | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
194 | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
195 | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
196 | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
197 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
    |
105 |                   $crate::rpc::block_on(task)
    |                   --------------------- ^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |                   |
    |                   required by a bound introduced by this call
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:192:1
    |
192 | / crate::jsonrpc!(pub struct IndexerRpcClient {
193 | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
194 | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
195 | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
196 | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
197 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
     |
126  |                       $crate::rpc::block_on(task)
     |                       --------------------- ^^^^ `*mut u8` cannot be sent between threads safely
     |                       |
     |                       required by a bound introduced by this call
...
226  |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:192:1
     |
192  | / crate::jsonrpc!(pub struct IndexerRpcClient {
193  | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
194  | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
195  | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
196  | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
197  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
    |
126 |                       $crate::rpc::block_on(task)
    |                       --------------------- ^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |                       |
    |                       required by a bound introduced by this call
...
226 |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:192:1
    |
192 | / crate::jsonrpc!(pub struct IndexerRpcClient {
193 | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
194 | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
195 | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
196 | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
197 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
    |
126 |                       $crate::rpc::block_on(task)
    |                       --------------------- ^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |                       |
    |                       required by a bound introduced by this call
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_indexer.rs:192:1
    |
192 | / crate::jsonrpc!(pub struct IndexerRpcClient {
193 | |     pub fn get_indexer_tip(&self) -> Option<Tip>;
194 | |     pub fn get_cells(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Cell>;
195 | |     pub fn get_transactions(&self, search_key: SearchKey, order: Order, limit: Uint32, after: Option<JsonBytes>) -> Pagination<Tx>;
196 | |     pub fn get_cells_capacity(&self, search_key: SearchKey) -> Option<CellsCapacity>;
197 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
     |
105  |                   $crate::rpc::block_on(task)
     |                   --------------------- ^^^^ `*mut u8` cannot be sent between threads safely
     |                   |
     |                   required by a bound introduced by this call
...
226  |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:139:1
     |
139  | / crate::jsonrpc!(pub struct LightClientRpcClient {
140  | |     // BlockFilter
141  | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
142  | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...    |
168  | |     pub fn local_node_info(&self) -> LocalNode;
169  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
    |
105 |                   $crate::rpc::block_on(task)
    |                   --------------------- ^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |                   |
    |                   required by a bound introduced by this call
...
226 |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:139:1
    |
139 | / crate::jsonrpc!(pub struct LightClientRpcClient {
140 | |     // BlockFilter
141 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
142 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
168 | |     pub fn local_node_info(&self) -> LocalNode;
169 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:105:39
    |
105 |                   $crate::rpc::block_on(task)
    |                   --------------------- ^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |                   |
    |                   required by a bound introduced by this call
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:139:1
    |
139 | / crate::jsonrpc!(pub struct LightClientRpcClient {
140 | |     // BlockFilter
141 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
142 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
168 | |     pub fn local_node_info(&self) -> LocalNode;
169 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
     |
126  |                       $crate::rpc::block_on(task)
     |                       --------------------- ^^^^ `*mut u8` cannot be sent between threads safely
     |                       |
     |                       required by a bound introduced by this call
...
226  |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
     |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:139:1
     |
139  | / crate::jsonrpc!(pub struct LightClientRpcClient {
140  | |     // BlockFilter
141  | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
142  | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...    |
168  | |     pub fn local_node_info(&self) -> LocalNode;
169  | | });
     | |__- in this macro invocation
     |
     = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
    |
126 |                       $crate::rpc::block_on(task)
    |                       --------------------- ^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |                       |
    |                       required by a bound introduced by this call
...
226 |       ) -> impl std::future::Future<Output = Result<RET, crate::rpc::RpcError>>
    |            -------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<_, RpcError>>`
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:139:1
    |
139 | / crate::jsonrpc!(pub struct LightClientRpcClient {
140 | |     // BlockFilter
141 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
142 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
168 | |     pub fn local_node_info(&self) -> LocalNode;
169 | | });
    | |__- in this macro invocation
    |
    = help: within `impl futures::Future<Output = std::result::Result<_, RpcError>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:126:43
    |
126 |                       $crate::rpc::block_on(task)
    |                       --------------------- ^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |                       |
    |                       required by a bound introduced by this call
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:139:1
    |
139 | / crate::jsonrpc!(pub struct LightClientRpcClient {
140 | |     // BlockFilter
141 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
142 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
168 | |     pub fn local_node_info(&self) -> LocalNode;
169 | | });
    | |__- in this macro invocation
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:488:30
     |
488  |           crate::rpc::block_on(self.get_cell_with_data_async(out_point))
     |           -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely
     |           |
     |           required by a bound introduced by this call
...
491  | /     pub async fn get_cell_with_data_async(
492  | |         &self,
493  | |         out_point: &OutPoint,
494  | |     ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
     | |________________________________________________________________- within this `impl Future<Output = Result<(CellOutput, Bytes), ...>>`
     |
     = note: the full trait has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-12144729817142576162.txt'
     = help: within `impl Future<Output = Result<(CellOutput, Bytes), ...>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
     |
494  |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
     |  __________________________________________________________________^
495  | |         let mut inner = self.inner.lock().await;
496  | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497  | |             return Ok(pair.clone());
...    |
517  | |         Ok((output, output_data))
518  | |     }
     | |_____^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-12144729817142576162.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider removing this method call, as the receiver has type `&DefaultTransactionDependencyProvider` and `&DefaultTransactionDependencyProvider: std::marker::Send` trivially holds
     |
488  -         crate::rpc::block_on(self.get_cell_with_data_async(out_point))
488  +         crate::rpc::block_on(self)
     |

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:488:30
    |
488 |           crate::rpc::block_on(self.get_cell_with_data_async(out_point))
    |           -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |           |
    |           required by a bound introduced by this call
...
491 | /     pub async fn get_cell_with_data_async(
492 | |         &self,
493 | |         out_point: &OutPoint,
494 | |     ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
    | |________________________________________________________________- within this `impl Future<Output = Result<(CellOutput, Bytes), ...>>`
    |
    = note: the full trait has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-12144729817142576162.txt'
    = help: within `impl Future<Output = Result<(CellOutput, Bytes), ...>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
    |
494 |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
    |  __________________________________________________________________^
495 | |         let mut inner = self.inner.lock().await;
496 | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497 | |             return Ok(pair.clone());
...   |
517 | |         Ok((output, output_data))
518 | |     }
    | |_____^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider removing this method call, as the receiver has type `&DefaultTransactionDependencyProvider` and `&DefaultTransactionDependencyProvider: std::marker::Send` trivially holds
    |
488 -         crate::rpc::block_on(self.get_cell_with_data_async(out_point))
488 +         crate::rpc::block_on(self)
    |

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:488:30
    |
488 |         crate::rpc::block_on(self.get_cell_with_data_async(out_point))
    |         -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |         |
    |         required by a bound introduced by this call
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
    |
494 |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
    |  __________________________________________________________________^
495 | |         let mut inner = self.inner.lock().await;
496 | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497 | |             return Ok(pair.clone());
...   |
517 | |         Ok((output, output_data))
518 | |     }
    | |_____^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use parentheses to call this trait object
    |
488 |         crate::rpc::block_on(self.get_cell_with_data_async(out_point)())
    |                                                                      ++
help: consider removing this method call, as the receiver has type `&DefaultTransactionDependencyProvider` and `&DefaultTransactionDependencyProvider: std::marker::Send` trivially holds
    |
488 -         crate::rpc::block_on(self.get_cell_with_data_async(out_point))
488 +         crate::rpc::block_on(self)
    |

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/util.rs:33:26
     |
33   |     crate::rpc::block_on(get_max_mature_number_async(&rpc_client.into()))
     |     -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely
     |     |
     |     required by a bound introduced by this call
...
36   | pub async fn get_max_mature_number_async(rpc_client: &CkbRpcAsyncClient) -> Result<u64, String> {
     | ----------------------------------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<u64, std::string::String>>`
     |
     = help: within `impl futures::Future<Output = std::result::Result<u64, std::string::String>>`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<ckb_jsonrpc_types::Consensus, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/util.rs:36:97
     |
36   |   pub async fn get_max_mature_number_async(rpc_client: &CkbRpcAsyncClient) -> Result<u64, String> {
     |  _________________________________________________________________________________________________^
37   | |     let cellbase_maturity = EpochNumberWithFraction::from_full_value(
38   | |         rpc_client
39   | |             .get_consensus()
...    |
84   | |     }
85   | | }
     | |_^
note: required by a bound in `rpc::block_on`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
     |
14   | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
     |                                                                   ^^^^ required by this bound in `block_on`
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/util.rs:33:26
    |
33  |     crate::rpc::block_on(get_max_mature_number_async(&rpc_client.into()))
    |     -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |     |
    |     required by a bound introduced by this call
...
36  | pub async fn get_max_mature_number_async(rpc_client: &CkbRpcAsyncClient) -> Result<u64, String> {
    | ----------------------------------------------------------------------------------------------- within this `impl futures::Future<Output = std::result::Result<u64, std::string::String>>`
    |
    = help: within `impl futures::Future<Output = std::result::Result<u64, std::string::String>>`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<ckb_jsonrpc_types::Consensus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/util.rs:36:97
    |
36  |   pub async fn get_max_mature_number_async(rpc_client: &CkbRpcAsyncClient) -> Result<u64, String> {
    |  _________________________________________________________________________________________________^
37  | |     let cellbase_maturity = EpochNumberWithFraction::from_full_value(
38  | |         rpc_client
39  | |             .get_consensus()
...   |
84  | |     }
85  | | }
    | |_^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/util.rs:33:26
    |
33  |     crate::rpc::block_on(get_max_mature_number_async(&rpc_client.into()))
    |     -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |     |
    |     required by a bound introduced by this call
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<ckb_jsonrpc_types::Consensus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/util.rs:36:97
    |
36  |   pub async fn get_max_mature_number_async(rpc_client: &CkbRpcAsyncClient) -> Result<u64, String> {
    |  _________________________________________________________________________________________________^
37  | |     let cellbase_maturity = EpochNumberWithFraction::from_full_value(
38  | |         rpc_client
39  | |             .get_consensus()
...   |
84  | |     }
85  | | }
    | |_^
note: required by a bound in `rpc::block_on`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:14:67
    |
14  | pub(crate) fn block_on<F: Send>(future: impl Future<Output = F> + Send) -> F {
    |                                                                   ^^^^ required by this bound in `block_on`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use parentheses to call this trait object
    |
33  |     crate::rpc::block_on(get_max_mature_number_async(&rpc_client.into())())
    |                                                                         ++

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52
     |
221  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
     |  ____________________________________________________^
222  | |         if let Some(block_hash) = self
223  | |             .ckb_client
224  | |             .get_transaction(tx_hash.unpack())
...    |
237  | |         }
238  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52: 238:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52: 238:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<...>, ...>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52
     |
221  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
     |  ____________________________________________________^
222  | |         if let Some(block_hash) = self
223  | |             .ckb_client
224  | |             .get_transaction(tx_hash.unpack())
...    |
237  | |         }
238  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-10944284465232560079.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52
    |
221 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
222 | |         if let Some(block_hash) = self
223 | |             .ckb_client
224 | |             .get_transaction(tx_hash.unpack())
...   |
237 | |         }
238 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52: 238:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52: 238:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<...>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52
    |
221 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
222 | |         if let Some(block_hash) = self
223 | |             .ckb_client
224 | |             .get_transaction(tx_hash.unpack())
...   |
237 | |         }
238 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52
    |
221 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
222 | |         if let Some(block_hash) = self
223 | |             .ckb_client
224 | |             .get_transaction(tx_hash.unpack())
...   |
237 | |         }
238 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<...>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:221:52
    |
221 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
222 | |         if let Some(block_hash) = self
223 | |             .ckb_client
224 | |             .get_transaction(tx_hash.unpack())
...   |
237 | |         }
238 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52
     |
242  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
     |  ____________________________________________________^
243  | |         Ok(self
244  | |             .ckb_client
245  | |             .get_header_by_number(number.into())
...    |
248  | |             .map(Into::into))
249  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52: 249:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52: 249:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<HeaderView>, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52
     |
242  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
     |  ____________________________________________________^
243  | |         Ok(self
244  | |             .ckb_client
245  | |             .get_header_by_number(number.into())
...    |
248  | |             .map(Into::into))
249  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-11311143731923659353.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52
    |
242 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
243 | |         Ok(self
244 | |             .ckb_client
245 | |             .get_header_by_number(number.into())
...   |
248 | |             .map(Into::into))
249 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52: 249:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52: 249:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<HeaderView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52
    |
242 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
243 | |         Ok(self
244 | |             .ckb_client
245 | |             .get_header_by_number(number.into())
...   |
248 | |             .map(Into::into))
249 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52
    |
242 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
243 | |         Ok(self
244 | |             .ckb_client
245 | |             .get_header_by_number(number.into())
...   |
248 | |             .map(Into::into))
249 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<HeaderView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:242:52
    |
242 |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
243 | |         Ok(self
244 | |             .ckb_client
245 | |             .get_header_by_number(number.into())
...   |
248 | |             .map(Into::into))
249 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59
     |
328  |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
     |  ___________________________________________________________^
329  | |         let max_mature_number = get_max_mature_number_async(&self.ckb_client)
330  | |             .await
331  | |             .map_err(|err| CellCollectorError::Internal(anyhow!(err)))?;
...    |
405  | |         Ok((cells, total_capacity))
406  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59: 406:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59: 406:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<JsonUint<u64>, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59
     |
328  |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
     |  ___________________________________________________________^
329  | |         let max_mature_number = get_max_mature_number_async(&self.ckb_client)
330  | |             .await
331  | |             .map_err(|err| CellCollectorError::Internal(anyhow!(err)))?;
...    |
405  | |         Ok((cells, total_capacity))
406  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<(Vec<...>, ...), ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-7748313467232587360.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59
    |
328 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
329 | |         let max_mature_number = get_max_mature_number_async(&self.ckb_client)
330 | |             .await
331 | |             .map_err(|err| CellCollectorError::Internal(anyhow!(err)))?;
...   |
405 | |         Ok((cells, total_capacity))
406 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59: 406:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59: 406:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<JsonUint<u64>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59
    |
328 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
329 | |         let max_mature_number = get_max_mature_number_async(&self.ckb_client)
330 | |             .await
331 | |             .map_err(|err| CellCollectorError::Internal(anyhow!(err)))?;
...   |
405 | |         Ok((cells, total_capacity))
406 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<(Vec<...>, ...), ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59
    |
328 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
329 | |         let max_mature_number = get_max_mature_number_async(&self.ckb_client)
330 | |             .await
331 | |             .map_err(|err| CellCollectorError::Internal(anyhow!(err)))?;
...   |
405 | |         Ok((cells, total_capacity))
406 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<JsonUint<u64>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:328:59
    |
328 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
329 | |         let max_mature_number = get_max_mature_number_async(&self.ckb_client)
330 | |             .await
331 | |             .map_err(|err| CellCollectorError::Internal(anyhow!(err)))?;
...   |
405 | |         Ok((cells, total_capacity))
406 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<(Vec<...>, ...), ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62
     |
526  |       ) -> Result<TransactionView, TransactionDependencyError> {
     |  ______________________________________________________________^
527  | |         let mut inner = self.inner.lock().await;
528  | |         if let Some(tx) = inner.tx_cache.get(tx_hash) {
529  | |             return Ok(tx.clone());
...    |
555  | |         Ok(tx)
556  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62: 556:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62: 556:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<...>, ...>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62
     |
526  |       ) -> Result<TransactionView, TransactionDependencyError> {
     |  ______________________________________________________________^
527  | |         let mut inner = self.inner.lock().await;
528  | |         if let Some(tx) = inner.tx_cache.get(tx_hash) {
529  | |             return Ok(tx.clone());
...    |
555  | |         Ok(tx)
556  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<TransactionView, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-10944284465232560079.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62
    |
526 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
527 | |         let mut inner = self.inner.lock().await;
528 | |         if let Some(tx) = inner.tx_cache.get(tx_hash) {
529 | |             return Ok(tx.clone());
...   |
555 | |         Ok(tx)
556 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62: 556:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62: 556:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<...>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62
    |
526 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
527 | |         let mut inner = self.inner.lock().await;
528 | |         if let Some(tx) = inner.tx_cache.get(tx_hash) {
529 | |             return Ok(tx.clone());
...   |
555 | |         Ok(tx)
556 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<TransactionView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62
    |
526 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
527 | |         let mut inner = self.inner.lock().await;
528 | |         if let Some(tx) = inner.tx_cache.get(tx_hash) {
529 | |             return Ok(tx.clone());
...   |
555 | |         Ok(tx)
556 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<...>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:526:62
    |
526 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
527 | |         let mut inner = self.inner.lock().await;
528 | |         if let Some(tx) = inner.tx_cache.get(tx_hash) {
529 | |             return Ok(tx.clone());
...   |
555 | |         Ok(tx)
556 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<TransactionView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57
     |
560  |       ) -> Result<CellOutput, TransactionDependencyError> {
     |  _________________________________________________________^
561  | |         {
562  | |             let inner = self.inner.lock().await;
563  | |             let ret = inner.offchain_cache.get_cell(out_point);
...    |
570  | |             .map(|(output, _)| output)
571  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57: 571:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57: 571:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
     |
494  |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
     |  __________________________________________________________________^
495  | |         let mut inner = self.inner.lock().await;
496  | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497  | |             return Ok(pair.clone());
...    |
517  | |         Ok((output, output_data))
518  | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57
     |
560  |       ) -> Result<CellOutput, TransactionDependencyError> {
     |  _________________________________________________________^
561  | |         {
562  | |             let inner = self.inner.lock().await;
563  | |             let ret = inner.offchain_cache.get_cell(out_point);
...    |
570  | |             .map(|(output, _)| output)
571  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<CellOutput, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-2009007898353336289.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57
    |
560 |       ) -> Result<CellOutput, TransactionDependencyError> {
    |  _________________________________________________________^
561 | |         {
562 | |             let inner = self.inner.lock().await;
563 | |             let ret = inner.offchain_cache.get_cell(out_point);
...   |
570 | |             .map(|(output, _)| output)
571 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57: 571:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57: 571:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
    |
494 |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
    |  __________________________________________________________________^
495 | |         let mut inner = self.inner.lock().await;
496 | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497 | |             return Ok(pair.clone());
...   |
517 | |         Ok((output, output_data))
518 | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57
    |
560 |       ) -> Result<CellOutput, TransactionDependencyError> {
    |  _________________________________________________________^
561 | |         {
562 | |             let inner = self.inner.lock().await;
563 | |             let ret = inner.offchain_cache.get_cell(out_point);
...   |
570 | |             .map(|(output, _)| output)
571 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<CellOutput, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57
    |
560 |       ) -> Result<CellOutput, TransactionDependencyError> {
    |  _________________________________________________________^
561 | |         {
562 | |             let inner = self.inner.lock().await;
563 | |             let ret = inner.offchain_cache.get_cell(out_point);
...   |
570 | |             .map(|(output, _)| output)
571 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
    |
494 |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
    |  __________________________________________________________________^
495 | |         let mut inner = self.inner.lock().await;
496 | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497 | |             return Ok(pair.clone());
...   |
517 | |         Ok((output, output_data))
518 | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:560:57
    |
560 |       ) -> Result<CellOutput, TransactionDependencyError> {
    |  _________________________________________________________^
561 | |         {
562 | |             let inner = self.inner.lock().await;
563 | |             let ret = inner.offchain_cache.get_cell(out_point);
...   |
570 | |             .map(|(output, _)| output)
571 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<CellOutput, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52
     |
575  |       ) -> Result<Bytes, TransactionDependencyError> {
     |  ____________________________________________________^
576  | |         {
577  | |             let inner = self.inner.lock().await;
578  | |             let ret = inner.offchain_cache.get_cell_data(out_point);
...    |
585  | |             .map(|(_, output_data)| output_data)
586  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52: 586:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52: 586:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
     |
494  |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
     |  __________________________________________________________________^
495  | |         let mut inner = self.inner.lock().await;
496  | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497  | |             return Ok(pair.clone());
...    |
517  | |         Ok((output, output_data))
518  | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52
     |
575  |       ) -> Result<Bytes, TransactionDependencyError> {
     |  ____________________________________________________^
576  | |         {
577  | |             let inner = self.inner.lock().await;
578  | |             let ret = inner.offchain_cache.get_cell_data(out_point);
...    |
585  | |             .map(|(_, output_data)| output_data)
586  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Bytes, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-2009007898353336289.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52
    |
575 |       ) -> Result<Bytes, TransactionDependencyError> {
    |  ____________________________________________________^
576 | |         {
577 | |             let inner = self.inner.lock().await;
578 | |             let ret = inner.offchain_cache.get_cell_data(out_point);
...   |
585 | |             .map(|(_, output_data)| output_data)
586 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52: 586:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52: 586:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
    |
494 |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
    |  __________________________________________________________________^
495 | |         let mut inner = self.inner.lock().await;
496 | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497 | |             return Ok(pair.clone());
...   |
517 | |         Ok((output, output_data))
518 | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52
    |
575 |       ) -> Result<Bytes, TransactionDependencyError> {
    |  ____________________________________________________^
576 | |         {
577 | |             let inner = self.inner.lock().await;
578 | |             let ret = inner.offchain_cache.get_cell_data(out_point);
...   |
585 | |             .map(|(_, output_data)| output_data)
586 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Bytes, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52
    |
575 |       ) -> Result<Bytes, TransactionDependencyError> {
    |  ____________________________________________________^
576 | |         {
577 | |             let inner = self.inner.lock().await;
578 | |             let ret = inner.offchain_cache.get_cell_data(out_point);
...   |
585 | |             .map(|(_, output_data)| output_data)
586 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<CellWithStatus, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:494:66
    |
494 |       ) -> Result<(CellOutput, Bytes), TransactionDependencyError> {
    |  __________________________________________________________________^
495 | |         let mut inner = self.inner.lock().await;
496 | |         if let Some(pair) = inner.cell_cache.get(out_point) {
497 | |             return Ok(pair.clone());
...   |
517 | |         Ok((output, output_data))
518 | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:575:52
    |
575 |       ) -> Result<Bytes, TransactionDependencyError> {
    |  ____________________________________________________^
576 | |         {
577 | |             let inner = self.inner.lock().await;
578 | |             let ret = inner.offchain_cache.get_cell_data(out_point);
...   |
585 | |             .map(|(_, output_data)| output_data)
586 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Bytes, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57
     |
590  |       ) -> Result<HeaderView, TransactionDependencyError> {
     |  _________________________________________________________^
591  | |         let mut inner = self.inner.lock().await;
592  | |         if let Some(header) = inner.header_cache.get(block_hash) {
593  | |             return Ok(header.clone());
...    |
603  | |         Ok(header)
604  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57: 604:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57: 604:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<HeaderView>, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57
     |
590  |       ) -> Result<HeaderView, TransactionDependencyError> {
     |  _________________________________________________________^
591  | |         let mut inner = self.inner.lock().await;
592  | |         if let Some(header) = inner.header_cache.get(block_hash) {
593  | |             return Ok(header.clone());
...    |
603  | |         Ok(header)
604  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<HeaderView, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8546854437400482623.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57
    |
590 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
591 | |         let mut inner = self.inner.lock().await;
592 | |         if let Some(header) = inner.header_cache.get(block_hash) {
593 | |             return Ok(header.clone());
...   |
603 | |         Ok(header)
604 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57: 604:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57: 604:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<HeaderView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57
    |
590 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
591 | |         let mut inner = self.inner.lock().await;
592 | |         if let Some(header) = inner.header_cache.get(block_hash) {
593 | |             return Ok(header.clone());
...   |
603 | |         Ok(header)
604 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<HeaderView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57
    |
590 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
591 | |         let mut inner = self.inner.lock().await;
592 | |         if let Some(header) = inner.header_cache.get(block_hash) {
593 | |             return Ok(header.clone());
...   |
603 | |         Ok(header)
604 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<HeaderView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:590:57
    |
590 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
591 | |         let mut inner = self.inner.lock().await;
592 | |         if let Some(header) = inner.header_cache.get(block_hash) {
593 | |             return Ok(header.clone());
...   |
603 | |         Ok(header)
604 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<HeaderView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79
     |
609  |       ) -> Result<Option<ckb_types::packed::Bytes>, TransactionDependencyError> {
     |  _______________________________________________________________________________^
610  | |         let inner = self.inner.lock().await;
611  | |
612  | |         let block = inner
...    |
620  | |         }
621  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79: 621:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79: 621:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<BlockView>, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
     |
113  | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114  | |     // Chain
115  | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116  | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...    |
206  | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79
     |
609  |       ) -> Result<Option<ckb_types::packed::Bytes>, TransactionDependencyError> {
     |  _______________________________________________________________________________^
610  | |         let inner = self.inner.lock().await;
611  | |
612  | |         let block = inner
...    |
620  | |         }
621  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<Bytes>, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-13118525434930878879.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79
    |
609 |       ) -> Result<Option<ckb_types::packed::Bytes>, TransactionDependencyError> {
    |  _______________________________________________________________________________^
610 | |         let inner = self.inner.lock().await;
611 | |
612 | |         let block = inner
...   |
620 | |         }
621 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79: 621:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79: 621:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<BlockView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79
    |
609 |       ) -> Result<Option<ckb_types::packed::Bytes>, TransactionDependencyError> {
    |  _______________________________________________________________________________^
610 | |         let inner = self.inner.lock().await;
611 | |
612 | |         let block = inner
...   |
620 | |         }
621 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<Bytes>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79
    |
609 |       ) -> Result<Option<ckb_types::packed::Bytes>, TransactionDependencyError> {
    |  _______________________________________________________________________________^
610 | |         let inner = self.inner.lock().await;
611 | |
612 | |         let block = inner
...   |
620 | |         }
621 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<Option<BlockView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb.rs:113:1
    |
113 | / crate::jsonrpc_async!(pub struct CkbRpcAsyncClient {
114 | |     // Chain
115 | |     pub fn get_block(&self, hash: H256) -> Option<BlockView>;
116 | |     pub fn get_block_by_number(&self, number: BlockNumber) -> Option<BlockView>;
...   |
206 | |     pub fn calculate_dao_maximum_withdraw(&self, out_point: OutPoint, kind: DaoWithdrawingCalculationKind) -> Capacity;
207 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/default_impls.rs:609:79
    |
609 |       ) -> Result<Option<ckb_types::packed::Bytes>, TransactionDependencyError> {
    |  _______________________________________________________________________________^
610 | |         let inner = self.inner.lock().await;
611 | |
612 | |         let block = inner
...   |
620 | |         }
621 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<Bytes>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52
     |
50   |       ) -> Result<Option<HeaderView>, anyhow::Error> {
     |  ____________________________________________________^
51   | |         if let Some(Some(header)) = self.headers.get(tx_hash).as_ref().map(|pair| pair.value()) {
52   | |             return Ok(Some(header.clone()));
53   | |         }
...    |
77   | |         }
78   | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52: 78:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52: 78:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<TransactionWithStatus>, ...>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
     |
171  | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172  | |     // BlockFilter
173  | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174  | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...    |
200  | |     pub fn local_node_info(&self) -> LocalNode;
201  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52
     |
50   |       ) -> Result<Option<HeaderView>, anyhow::Error> {
     |  ____________________________________________________^
51   | |         if let Some(Some(header)) = self.headers.get(tx_hash).as_ref().map(|pair| pair.value()) {
52   | |             return Ok(Some(header.clone()));
53   | |         }
...    |
77   | |         }
78   | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-9317469156421159902.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52
    |
50  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
51  | |         if let Some(Some(header)) = self.headers.get(tx_hash).as_ref().map(|pair| pair.value()) {
52  | |             return Ok(Some(header.clone()));
53  | |         }
...   |
77  | |         }
78  | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52: 78:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52: 78:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<TransactionWithStatus>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52
    |
50  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
51  | |         if let Some(Some(header)) = self.headers.get(tx_hash).as_ref().map(|pair| pair.value()) {
52  | |             return Ok(Some(header.clone()));
53  | |         }
...   |
77  | |         }
78  | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52
    |
50  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
51  | |         if let Some(Some(header)) = self.headers.get(tx_hash).as_ref().map(|pair| pair.value()) {
52  | |             return Ok(Some(header.clone()));
53  | |         }
...   |
77  | |         }
78  | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<TransactionWithStatus>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:50:52
    |
50  |       ) -> Result<Option<HeaderView>, anyhow::Error> {
    |  ____________________________________________________^
51  | |         if let Some(Some(header)) = self.headers.get(tx_hash).as_ref().map(|pair| pair.value()) {
52  | |             return Ok(Some(header.clone()));
53  | |         }
...   |
77  | |         }
78  | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<Option<HeaderView>, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62
     |
127  |       ) -> Result<TransactionView, TransactionDependencyError> {
     |  ______________________________________________________________^
128  | |         if let Some(Some(tx)) = self.txs.get(tx_hash).as_ref().map(|pair| pair.value()) {
129  | |             return Ok(tx.clone());
130  | |         }
...    |
184  | |         }
185  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62: 185:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62: 185:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<TransactionWithStatus>, ...>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
     |
171  | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172  | |     // BlockFilter
173  | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174  | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...    |
200  | |     pub fn local_node_info(&self) -> LocalNode;
201  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62
     |
127  |       ) -> Result<TransactionView, TransactionDependencyError> {
     |  ______________________________________________________________^
128  | |         if let Some(Some(tx)) = self.txs.get(tx_hash).as_ref().map(|pair| pair.value()) {
129  | |             return Ok(tx.clone());
130  | |         }
...    |
184  | |         }
185  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<TransactionView, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-9317469156421159902.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62
    |
127 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
128 | |         if let Some(Some(tx)) = self.txs.get(tx_hash).as_ref().map(|pair| pair.value()) {
129 | |             return Ok(tx.clone());
130 | |         }
...   |
184 | |         }
185 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62: 185:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62: 185:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<TransactionWithStatus>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62
    |
127 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
128 | |         if let Some(Some(tx)) = self.txs.get(tx_hash).as_ref().map(|pair| pair.value()) {
129 | |             return Ok(tx.clone());
130 | |         }
...   |
184 | |         }
185 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<TransactionView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62
    |
127 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
128 | |         if let Some(Some(tx)) = self.txs.get(tx_hash).as_ref().map(|pair| pair.value()) {
129 | |             return Ok(tx.clone());
130 | |         }
...   |
184 | |         }
185 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<TransactionWithStatus>, ...>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:127:62
    |
127 |       ) -> Result<TransactionView, TransactionDependencyError> {
    |  ______________________________________________________________^
128 | |         if let Some(Some(tx)) = self.txs.get(tx_hash).as_ref().map(|pair| pair.value()) {
129 | |             return Ok(tx.clone());
130 | |         }
...   |
184 | |         }
185 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<TransactionView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57
     |
216  |       ) -> Result<HeaderView, TransactionDependencyError> {
     |  _________________________________________________________^
217  | |         if let Some(Some(header)) = self
218  | |             .headers
219  | |             .get(block_hash)
...    |
244  | |         }
245  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57: 245:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57: 245:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<HeaderView>, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
     |
171  | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172  | |     // BlockFilter
173  | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174  | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...    |
200  | |     pub fn local_node_info(&self) -> LocalNode;
201  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57
     |
216  |       ) -> Result<HeaderView, TransactionDependencyError> {
     |  _________________________________________________________^
217  | |         if let Some(Some(header)) = self
218  | |             .headers
219  | |             .get(block_hash)
...    |
244  | |         }
245  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<HeaderView, ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-18166249962395762056.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57
    |
216 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
217 | |         if let Some(Some(header)) = self
218 | |             .headers
219 | |             .get(block_hash)
...   |
244 | |         }
245 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57: 245:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57: 245:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<HeaderView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57
    |
216 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
217 | |         if let Some(Some(header)) = self
218 | |             .headers
219 | |             .get(block_hash)
...   |
244 | |         }
245 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<HeaderView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57
    |
216 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
217 | |         if let Some(Some(header)) = self
218 | |             .headers
219 | |             .get(block_hash)
...   |
244 | |         }
245 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl Future<Output = Result<FetchStatus<HeaderView>, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:216:57
    |
216 |       ) -> Result<HeaderView, TransactionDependencyError> {
    |  _________________________________________________________^
217 | |         if let Some(Some(header)) = self
218 | |             .headers
219 | |             .get(block_hash)
...   |
244 | |         }
245 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<HeaderView, ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `*mut u8` cannot be sent between threads safely
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59
     |
279  |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
     |  ___________________________________________________________^
280  | |         let max_mature_number = 0;
281  | |         self.offchain.max_mature_number = max_mature_number;
282  | |         let tip_num = self
...    |
354  | |         Ok((cells, total_capacity))
355  | |     }
     | |     ^
     | |     |
     | |_____`*mut u8` cannot be sent between threads safely
     |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59: 355:6}`
     |
     = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59: 355:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`
note: required because it appears within the type `PhantomData<*mut u8>`
    --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
     |
753  | pub struct PhantomData<T: ?Sized>;
     |            ^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::JsValue`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/lib.rs:135:12
     |
135  | pub struct JsValue {
     |            ^^^^^^^
note: required because it appears within the type `js_sys::Object`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/js-sys-0.3.77/src/lib.rs:3445:14
     |
3445 |     pub type Object;
     |              ^^^^^^
note: required because it appears within the type `web_sys::features::gen_Response::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/web-sys-0.3.77/src/features/gen_Response.rs:14:14
     |
14   |     pub type Response;
     |              ^^^^^^^^
note: required because it appears within the type `http::response::Response<web_sys::features::gen_Response::Response>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/http-1.2.0/src/response.rs:180:12
     |
180  | pub struct Response<T> {
     |            ^^^^^^^^
note: required because it appears within the type `reqwest::Response`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
     |
20   | pub struct Response {
     |            ^^^^^^^^
note: required because it's used within this `async` fn body
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
     |
92   |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
     |  ______________________________________________________________________^
93   | |         let full = self.bytes().await?;
94   | |
95   | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96   | |     }
     | |_____^
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
     |
235  |         async move {
     |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<ckb_jsonrpc_types::HeaderView, RpcError>>`
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
     |
187  |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
     |
171  | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172  | |     // BlockFilter
173  | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174  | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...    |
200  | |     pub fn local_node_info(&self) -> LocalNode;
201  | | });
     | |__- in this macro invocation
note: required because it's used within this `async` block
    --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59
     |
279  |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
     |  ___________________________________________________________^
280  | |         let max_mature_number = 0;
281  | |         self.offchain.max_mature_number = max_mature_number;
282  | |         let tip_num = self
...    |
354  | |         Ok((cells, total_capacity))
355  | |     }
     | |_____^
     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<(Vec<...>, ...), ...>> + Send>>`
     = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-4179246506962401931.txt'
     = note: consider using `--verbose` to print the full type name to the console
     = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59
    |
279 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
280 | |         let max_mature_number = 0;
281 | |         self.offchain.max_mature_number = max_mature_number;
282 | |         let tip_num = self
...   |
354 | |         Ok((cells, total_capacity))
355 | |     }
    | |     ^
    | |     |
    | |_____`Rc<RefCell<wasm_bindgen_futures::Inner>>` cannot be sent between threads safely
    |       within this `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59: 355:6}`
    |
    = help: within `{async block@/root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59: 355:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<wasm_bindgen_futures::Inner>>`
note: required because it appears within the type `wasm_bindgen_futures::JsFuture`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12
    |
110 | pub struct JsFuture {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:34:1
    |
34  | / {
35  | |     use wasm_bindgen_futures::JsFuture;
36  | |
37  | |     let js_val = JsFuture::from(promise).await.map_err(crate::error::wasm)?;
...   |
41  | |         .map_err(|_js_val| "promise resolved to unexpected type".into())
42  | | }
    | |_^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:117:54
    |
117 |       pub async fn bytes(self) -> crate::Result<Bytes> {
    |  ______________________________________________________^
118 | |         let p = self
119 | |             .http
120 | |             .body()
...   |
132 | |         Ok(bytes.into())
133 | |     }
    | |_____^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<ckb_jsonrpc_types::HeaderView, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59
    |
279 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
280 | |         let max_mature_number = 0;
281 | |         self.offchain.max_mature_number = max_mature_number;
282 | |         let tip_num = self
...   |
354 | |         Ok((cells, total_capacity))
355 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<(Vec<...>, ...), ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-5022376247211896116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `(dyn FnMut() + 'static)` cannot be sent between threads safely
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59
    |
279 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
280 | |         let max_mature_number = 0;
281 | |         self.offchain.max_mature_number = max_mature_number;
282 | |         let tip_num = self
...   |
354 | |         Ok((cells, total_capacity))
355 | |     }
    | |_____^ `(dyn FnMut() + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn FnMut() + 'static)`
    = note: required for `Unique<(dyn FnMut() + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn FnMut() + 'static)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:233:12
    |
233 | pub struct Box<
    |            ^^^
note: required because it appears within the type `ManuallyDrop<Box<(dyn FnMut() + 'static)>>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/manually_drop.rs:157:12
    |
157 | pub struct ManuallyDrop<T: ?Sized> {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/wasm-bindgen-0.2.100/src/closure.rs:242:12
    |
242 | pub struct Closure<T: ?Sized> {
    |            ^^^^^^^
    = note: required because it appears within the type `(wasm_bindgen::JsValue, wasm_bindgen::closure::Closure<(dyn FnMut() + 'static)>)`
note: required because it appears within the type `Option<(JsValue, Closure<dyn FnMut()>)>`
   --> /root/.rustup/toolchains/1.84.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:572:10
    |
572 | pub enum Option<T> {
    |          ^^^^^^
note: required because it appears within the type `reqwest::wasm::AbortGuard`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/mod.rs:45:8
    |
45  | struct AbortGuard {
    |        ^^^^^^^^^^
note: required because it appears within the type `reqwest::Response`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:20:12
    |
20  | pub struct Response {
    |            ^^^^^^^^
note: required because it's used within this `async` fn body
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/reqwest-0.12.14/src/wasm/response.rs:92:70
    |
92  |       pub async fn json<T: DeserializeOwned>(self) -> crate::Result<T> {
    |  ______________________________________________________________________^
93  | |         let full = self.bytes().await?;
94  | |
95  | |         serde_json::from_slice(&full).map_err(crate::error::decode)
96  | |     }
    | |_____^
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:235:9
    |
235 |         async move {
    |         ^^^^^^^^^^
note: required because it appears within the type `impl futures::Future<Output = std::result::Result<ckb_jsonrpc_types::HeaderView, RpcError>>`
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/mod.rs:187:69
    |
187 |   ...   pub fn $method(&$selff $(, $arg_name: $arg_ty)*) -> impl std::future::Future<Output =Result<$return_ty, $crate::rpc::RpcError>> {
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/rpc/ckb_light_client.rs:171:1
    |
171 | / crate::jsonrpc_async!(pub struct LightClientRpcAsyncClient {
172 | |     // BlockFilter
173 | |     pub fn set_scripts(&self, scripts: Vec<ScriptStatus>, command: Option<SetScriptsCommand>) -> ();
174 | |     pub fn get_scripts(&self) -> Vec<ScriptStatus>;
...   |
200 | |     pub fn local_node_info(&self) -> LocalNode;
201 | | });
    | |__- in this macro invocation
note: required because it's used within this `async` block
   --> /root/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/ckb-sdk-3.6.0/src/traits/light_client_impls.rs:279:59
    |
279 |       ) -> Result<(Vec<LiveCell>, u64), CellCollectorError> {
    |  ___________________________________________________________^
280 | |         let max_mature_number = 0;
281 | |         self.offchain.max_mature_number = max_mature_number;
282 | |         let tip_num = self
...   |
354 | |         Ok((cells, total_capacity))
355 | |     }
    | |_____^
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<(Vec<...>, ...), ...>> + Send>>`
    = note: the full name for the type has been written to '/root/fiber/target/wasm32-unknown-unknown/debug/deps/ckb_sdk-a6838cb606ed3181.long-type-8417038429257947976.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `crate::jsonrpc_async` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0277, E0425.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `ckb-sdk` (lib) due to 73 previous errors
